lbr = importrobot("C:\Users\marco\Documents\GitHub\Thesis\6DOF\LRM_ARM_testing\urdf\LRM_ARM_testing2.urdf");
lbr.DataFormat = 'row';
gripper = 'End_effector';
v = zeros(59,1);
load x_m
load goodconf.mat

for i = 1:height(goodconf)
    close all
    config = goodconf(i, 2:7);
    figure(1)
    config2 = config;
    config2(1) = pi + config2(1);
    show(lbr, config2)
    hold on
    P = FK(config,v);
    plot3(P(1)/1000, P(2)/1000, P(3)/1000, '.', 'MarkerSize', 20)
    plot3(-position_measured_rotated(i,1)/1000, -position_measured_rotated(i,2)/1000,position_measured_rotated(i,3)/1000, '.', 'MarkerSize', 20, 'Color','r')
    hold off
    %figure(2)
    %show(lbr, config,"Collisions","on")
end

% angles = goodconf(:,2:7);
% 
% % Original number of configurations
% numConfigs = size(angles, 1);
% 
% % Number of joints
% numJoints = size(angles, 2);
% 
% % Desired number of interpolated points
% numInterpPoints = 1;
% 
% % Original time steps (assuming configurations are at equal intervals)
% x = 1:numConfigs;
% 
% % Interpolated time steps
% xi = linspace(1, numConfigs, numInterpPoints * numConfigs);
% 
% % Interpolated angles
% interpAngles = zeros(length(xi), numJoints);
% 
% for j = 1:numJoints
%     qInterp(:, j) = interp1(x, angles(:, j), xi, 'spline'); % You can use 'linear', 'spline', etc.
% end
% r = rateControl(10000);
% for k = 1:size(qInterp,1)
%     show(lbr, qInterp(k,:), 'PreservePlot', false);
%     waitfor(r);
%     k/numInterpPoints
% end
